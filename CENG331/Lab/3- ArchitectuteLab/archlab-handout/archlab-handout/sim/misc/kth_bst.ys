# Gürhan İlhan Adıgüzel 
# 2448025

.pos 0   
    irmovq stack, %rsp      # Set up stack pointer
    call main               # Execute main program
    halt                    # Terminate program

main:   
    irmovq root, %rdi
    irmovq k, %rsi
    call func
    ret

# long kth_bst(struct Node* root, long *k)
# root in %rdi, k in %rsi
func:   
    irmovq  $0,%r8          # Constant 0
    irmovq  $1,%r9          # Constant 1
    irmovq  $8, %r10        # Constant 8
    irmovq  $-1,%rax        # rax = -1
    pushq   %r11
    rrmovq  %rdi, %r11
	andq    %rdi,%rdi	    # Set CC
    jne     if              # Stop when 0
    popq    %r11
    ret

if:     
    addq    %r10, %rdi      
    mrmovq  (%rdi), %rdi    # root = root->left
    call    func            # kth_bst(root->left, k);
    rrmovq  %r11, %rdi
    mrmovq  (%rsi), %r12    # r12 = *k
    subq    %r8, %r12       # k <= 0
    jle     else
    subq    %r9, %r12       # if (*k == 0)
    je      done
    rmmovq  %r12, (%rsi)    # rsi = *k--
    addq    %r10,%rdi       
    addq    %r10,%rdi       
    mrmovq  (%rdi), %rdi    # root = root->right
    call    func            # kth_bst(root->right, k);
    rrmovq  %r11, %rdi
    popq    %r11
    ret
        
else:   
    popq    %r11
    ret

done:   
    rmmovq  %r12, (%rsi)
    mrmovq  (%rdi), %rax    # return root->data;
    popq    %r11
    ret       

# Absolutely positioned here to debug addresses more easily.
.pos 0x200
root:
    .quad 17
    .quad node6
    .quad node24
node6:
    .quad 6
    .quad node4
    .quad node11
node4:
    .quad 4
    .quad node3
    .quad node5
node3:
    .quad 3
    .quad 0
    .quad 0
node5:
    .quad 5
    .quad 0 
    .quad 0
node11:
    .quad 11
    .quad node8
    .quad 0
node8:
    .quad 8
    .quad 0
    .quad 0
node24:
    .quad 24
    .quad node19
    .quad node40
node19:
    .quad 19
    .quad 0
    .quad 0
node40:
    .quad 40
    .quad 0
    .quad node52
node52:
    .quad 52
    .quad 0
    .quad 0
k:
    .quad 8

.pos 0x400
stack:  
