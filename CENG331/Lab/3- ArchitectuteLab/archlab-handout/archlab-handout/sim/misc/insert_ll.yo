                            | # Gürhan İlhan Adıgüzel 
                            | # 2448025
                            | 
0x000:                      | .pos 0   
0x000: 30f41004000000000000 |         irmovq stack, %rsp      # Set up stack pointer
0x00a: 801400000000000000   |         call main               # Execute main program
0x013: 00                   |         halt                    # Terminate program
                            | 
0x014:                      | main:   
0x014: 30f70002000000000000 |         irmovq ele0, %rdi
0x01e: 30f60004000000000000 |         irmovq array, %rsi
0x028: 30f23800000000000000 |         irmovq $56, %rdx
0x032: 803c00000000000000   |         call func
0x03b: 90                   |         ret
                            | 
                            | # struct list * insert_ll(struct list *head, long *array, long value)
                            | # head in %rdi, array in %rsi, value in %rdx
0x03c:                      | func:	
0x03c: 6300                 |         xorq    %rax,%rax       # kth = 0
0x03e: 30f80800000000000000 |         irmovq  $8, %r8         # Constant 8
0x048: 2029                 |         rrmovq  %rdx, %r9       # Constant value
0x04a: 40260000000000000000 |         rmmovq  %rdx, (%rsi)    # *array = value;
0x054: 6277                 |         andq    %rdi, %rdi	# Set CC
0x056: 73ce00000000000000   |         je      done            # Stop when 0
0x05f: 50a70000000000000000 |         mrmovq  (%rdi), %r10    
0x069: 61a9                 |         subq    %r10, %r9       # head->value > value
0x06b: 71ce00000000000000   |         jle      done
0x074: 2070                 |         rrmovq  %rdi, %rax      # return head
0x076: 207b                 |         rrmovq  %rdi, %r11      # *temp = head;
0x078: 20be                 |         rrmovq  %r11, %r14      # for temp->next
                            | 
0x07a:                      | loop:   
0x07a: 20eb                 |         rrmovq  %r14, %r11      # r11 = temp
0x07c: 608e                 |         addq    %r8, %r14       
0x07e: 50ee0000000000000000 |         mrmovq  (%r14), %r14    # r14 = temp->next
0x088: 62ee                 |         andq    %r14, %r14	# Set CC
0x08a: 73b300000000000000   |         je      insert
0x093: 2029                 |         rrmovq  %rdx, %r9       # r9 = value
0x095: 50de0000000000000000 |         mrmovq  (%r14),%r13     # r13 = temp->next->value    
0x09f: 61d9                 |         subq    %r13, %r9       # head->value > value
0x0a1: 71b300000000000000   |         jle     insert
0x0aa: 707a00000000000000   |         jmp     loop
                            | 
0x0b3:                      | insert: 
0x0b3: 206c                 |         rrmovq  %rsi, %r12      # r12 = array
0x0b5: 608c                 |         addq    %r8,  %r12      # r12 = (array+8)
0x0b7: 40ec0000000000000000 |         rmmovq  %r14, (%r12)    # *(array+8) = temp->next;
0x0c1: 608b                 |         addq    %r8, %r11
0x0c3: 406b0000000000000000 |         rmmovq  %rsi, (%r11)    # temp->next = array;
0x0cd: 90                   |         ret
                            | 
0x0ce:                      | done:   
0x0ce: 2060                 |         rrmovq  %rsi, %rax      # array = rax
0x0d0: 206c                 |         rrmovq  %rsi, %r12      # r12 = array
0x0d2: 608c                 |         addq    %r8,  %r12      # r12 = (array+8)
0x0d4: 407c0000000000000000 |         rmmovq  %rdi, (%r12)    # *(array+8) = head;
0x0de: 90                   |         ret
                            | 
                            | # Stack starts here and grows to lower addresses
                            | # An array with size of 2 to put new element in:
                            | # Make sure your code works correctly. Do not
                            | # fill beyond the bounds of the array. You should
                            | # see the new value and the pointer to the next
                            | # element.
                            | 
0x200:                      | .pos 0x200
0x200:                      | ele0:
0x200: 0500000000000000     |         .quad 0x0005
0x208: 1002000000000000     |         .quad ele1
0x210:                      | ele1:
0x210: 0c00000000000000     |         .quad 0x000c
0x218: 2002000000000000     |         .quad ele2
0x220:                      | ele2:
0x220: 1000000000000000     |         .quad 0x0010
0x228: 3002000000000000     |         .quad ele3
0x230:                      | ele3:
0x230: 1a00000000000000     |         .quad 0x001a
0x238: 4002000000000000     |         .quad ele4
0x240:                      | ele4:
0x240: 3000000000000000     |         .quad 0x0030
0x248: 5002000000000000     |         .quad ele5
0x250:                      | ele5:
0x250: 4500000000000000     |         .quad 0x0045
0x258: 6002000000000000     |         .quad ele6
0x260:                      | ele6:
0x260: 5e00000000000000     |         .quad 0x005e
0x268: 0000000000000000     |         .quad 0
                            | 
0x400:                      | .pos 0x400
0x400:                      | array:
0x400: 0000000000000000     |     .quad 0
0x408: 0000000000000000     |     .quad 0
                            | 
0x410:                      | stack:
